#!/bin/bash

# saner programming env: these switches turn some bugs into errors
set -o errexit -o pipefail -o noclobber -o nounset

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/JordanFaust/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/JordanFaust/dotfiles.git"

# Redirect output to install.log. Only errors are output to STDOUT
rm -rf install.log
exec 3>&1 >install.log 2>&1

#######################################
############### Utility ###############
#######################################

# header logging
e_header() {
    printf "\n$(tput setaf 3)%s$(tput sgr0)\n" "$@" >&3 >&1
}

# success logging
e_success() {
    printf "$(tput setaf 2)âœ“ %s$(tput sgr0)\n" "$@" >&3 >&1
}

# error logging
e_error() {
    printf "$(tput setaf 1)x %s$(tput sgr0)\n" "$@" >&3 >&1
}

# warning logging
e_warning() {
    printf "$(tput setaf 7)! %s$(tput sgr0)\n" "$@" >&3 >&1
}

# ask for confirmation before proceeding
seek_confirmation() {
    e_header "$@" >&3
    e_success "continue? (y/n)"
    read  -n 1 -u 3
    printf "\n"
}

# test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$reply" =~ ^[yy]$ ]]; then
      return 0
    fi
    return 1
}

# test whether we're in a git repo
is_git_repo() {
    $(git rev-parse --is-inside-work-tree &> /dev/null)
}

# test whether a command exists
# $1 - cmd to test
type_exists() {
    if [ $(type -p $1) ]; then
      return 0
    fi
    return 1
}

#######################################
############## Functions ##############
#######################################

dotfiles/link() {
    # Force create/replace the symlink.
    # rm "$1"
    sudo ln -sfn "${1}" "${2}"
    e_success "created link ${1} -> ${2}"
}

dotfiles/copy() {
    # Recursively copy the directory content to the specified directory
    mkdir -p "/${2}"
    cp -R "${1}" "${2}"
    e_success "copied file(s) ${1} -> ${2}"
}

install/dotfiles() {
    e_header "Syncing dotfile configuration"

    e_header "* Creating symlinks..."

    mkdir -p "${HOME}/.config"

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory.
    dotfiles/link "${DOTFILES_DIRECTORY}/tmux.conf" "${HOME}/.tmux.conf"
    dotfiles/link "${DOTFILES_DIRECTORY}/vim/vimrc" "${HOME}/.vimrc"
    dotfiles/link "${DOTFILES_DIRECTORY}/spacemacs" "${HOME}/.spacemacs"
    dotfiles/link "${DOTFILES_DIRECTORY}/spacemacs.d" "${HOME}/.spacemacs.d"
    dotfiles/link "${DOTFILES_DIRECTORY}/xsessionrc" "${HOME}/.xsessionrc"
    dotfiles/link "${DOTFILES_DIRECTORY}/xsettingsd" "${HOME}/.xsettingsd"
    dotfiles/link "${DOTFILES_DIRECTORY}/Xresources" "${HOME}/.Xresources"
    dotfiles/link "${DOTFILES_DIRECTORY}/gtkrc-2.0" "${HOME}/.gtkrc-2.0"
    dotfiles/link "${DOTFILES_DIRECTORY}/utility" "${HOME}/.utility"
    dotfiles/link "${DOTFILES_DIRECTORY}/config/awesome" "${HOME}/.config/awesome"
    dotfiles/link "${DOTFILES_DIRECTORY}/config/gtk-3.0" "${HOME}/.config/gtk-3.0"
    dotfiles/link "${DOTFILES_DIRECTORY}/config/compton.conf" "${HOME}/.config/compton.conf"
    dotfiles/link "${DOTFILES_DIRECTORY}/config/cava/config" "${HOME}/.config/cava/config"
    dotfiles/link "${DOTFILES_DIRECTORY}/themes" "${HOME}/.themes"
    dotfiles/link "${DOTFILES_DIRECTORY}/lightdm/lightdm-webkit.conf" "/etc/lightdm/lightdm-webkit.conf"
    dotfiles/link "${DOTFILES_DIRECTORY}/lightdm/lightdm-webkit2-greeter.conf" "/etc/lightdm/lightdm-webkit2-greeter.conf"
    # dotfiles/link "${DOTFILES_DIRECTORY}/lightdm/lightdm.conf" "/etc/lightdm/lightdm.conf"
    # dotfiles/link "${DOTFILES_DIRECTORY}/lightdm/pantheon-greeter.conf" "/etc/lightdm/pantheon-greeter.conf"

    e_header "* Copying files..."
    dotfiles/copy "${DOTFILES_DIRECTORY}/urxvt/" "${HOME}/.urxvt/"
}

apt/exists() {
    local package=$1
    dpkg -l "$package" > /dev/null
}

apt/install() {
    local package=$1
    if apt/exists "$package" ; then
        e_success "$package already installed"
    else
        sudo apt-get install -y -qq "$package"
        e_success "$package"
    fi
}

apt/repository/exists() {
    local repository=$1
    grep -q ".*$repository" /etc/apt/sources.list /etc/apt/sources.list.d/*
}

pacman/exists() {
    local package=$1
    pacman -Qi "$package" > /dev/null 2>&1
}

pacman/install() {
    local package=$1
    if pacman/exists "$package" ; then
        e_success "$package already installed"
    else
        sudo pacman -S --noconfirm "$package"
        e_success "$package installed"
    fi
}

yay/exiss() {
    local package=$1
    yay -Qi "$package" > /dev/null 2>&1
}

yay/install() {
    local package=$1
    if yay/exists "$package" ; then
        e_succes "$package already installed"
    else
        yay -S --clean --noconfirm "$package"
        e_success "$package installed"
    fi
}

install/dependencies() {
    if type_exists "pacman"; then
        install/dependencies/manjaro
    fi

    if type_exists "apt"; then
        install/dependencies/mint
    fi
}

install/dependencies/manjaro() {
    e_header "Syncing Packages"
    sudo pacman -Ssy > /dev/null 2>&1
    e_success "packages synced"

    e_header "Installing Manjaro dependencies..."

    e_header "Installing essentials"
    pacman/install curl
    pacman/install wget
    pacman/install unzip
    pacman/install awk
    pacman/install make
    pacman/install gcc

    e_header "Installing packages"

    e_header "* Installing Docker"
    pacman/install docker
    pacman/install containerd
    # sudo usermod -aG docker jfaust

    e_header "* Installing Networking Tools"
    pacman/install openvpn
    pacman/install networkmanager
    pacman/install networkmanager-openconnect
    pacman/install networkmanager-openvpn
    pacman/install net-tools

    e_header "* Installing CLI tools"
    pacman/install expect
    pacman/install feh
    pacman/install jq
    pacman/install neofetch
    pacman/install wmctrl
    pacman/install xclip
    pacman/install xdotool
    pacman/install imagemagick
    pacman/install maim

    e_header "* Installing Development Tools"
    pacman/install emacs
    pacman/install firefox
    pacman/install nodejs
    pacman/install npm
    pacman/install rxvt-unicode
    pacman/install tmux
    pacman/install vim
    pacman/install zsh
    pacman/install perl
    pacman/install aspell
    pacman/install aspell-en

    e_header "* Installing Development Languages"
    pacman/install go
    pacman/install python
    pacman/install python-pip
    pacman/install lua
    pacman/install luarocks

    e_header "* Installing package management tools"
    pacman/install yay

    e_header "* Installing Custom Window Manager tools"
    pacman/install papirus-icon-theme
    pacman/install rofi
    pacman/install powerline-fonts
    pacman/install libnotify
    pacman/install gobject-introspection
    pacman/install paper-icon-theme-git
    yay/install cava

    e_header "* Installing Greeter"
    yay/install lightdm-webkit-theme-aether

    e_header "* Installing Lua tooling for AwesomeWM"
    if ! [ -x "$(command -v dbus_proxy)" ]; then
        sudo luarocks install dbus_proxy --tree=system && e_success "dbus_proxy installed"
    else
        e_success "dbus_proxy already isntalled"
    fi

    if ! [ -x "$(luarocks show dkjson)" ]; then
        sudo luarocks install dkjson --tree=system && e_success "dkjson installed"
    else
        e_success "dkjson already isntalled"
    fi

    if ! [ -x "$(command -v luacheck)" ]; then
        sudo luarocks install luacheck --tree=system && e_success "luacheck installed"
    else
        e_success "luacheck already installed"
    fi
}

install/dependencies/mint() {
    # Preliminary dependencies
    e_header "Installing essentials..."
    apt/install curl
    apt/install wget
    apt/install build-essential

    # Add repositories
    e_header "Setting up repositories..."
    if ! apt/repository/exists "docker" ; then
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(. /etc/os-release; echo "$UBUNTU_CODENAME") stable"
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        e_success "setup docker repository"
    else
        e_success "docker repository already exists"
    fi

    if ! apt/repository/exists "papirus" ; then
        sudo add-apt-repository ppa:papirus/papirus
        e_success "setup ppa:papirus repository"
    else
        e_success "papirus repository already exists"
    fi

    if ! apt/repository/exists "docker" ; then
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90
        echo deb http://repository.spotify.com stable non-free | sudo tee /etc/apt/sources.list.d/spotify.list
        e_success "setup spotify repository"
    else
        e_success "spotify repository already exists"
    fi

    if ! apt/repository/exists "snwh" ; then
        sudo add-apt-repository ppa:snwh/ppa
        e_success "setup ppa:snwh/ppa repository"
    else
        e_success "snwh repository already exists"
    fi

    if ! apt/repository/exists "klaus-vormweg" ; then
        sudo add-apt-repository ppa:klaus-vormweg/awesome
        e_success "setup ppa:klaus-vormweg/awesome repository"
    else
        e_success "snwh repository already exists"
    fi

    # update apt with added repositories
    e_header "Updating apt..."
    sudo apt-get -qq update

    # Custom dependencies

    e_header "Installing dependencies..."
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install liblua5.3-0 # install lua 5.3 before installing awesome
    apt/install awesome
    apt/install awesome-extra
    # apt/install luarocks
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install compton
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    # apt/install conky
    # source: download.docker.com_linux_ubuntu_dists_bionic_stable_binary-amd64_Packages
    apt/install docker-ce
    apt/install docker-ce-cli
    apt/install containerd.io
    sudo usermod -aG docker jfaust
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    # apt/install dunst
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install emacs
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install expect
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install feh
    # source: packages.linuxmint.com_dists_tessa_upstream_binary-amd64_Packages
    apt/install firefox
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install fonts-powerline
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    # apt/install gnome-terminal
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install jq
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install lxappearance
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install cmake
    apt/install libclutter-gtk-1.0-dev
    apt/install libgdk-pixbuf2.0-dev
    apt/install libgee-0.8-dev
    apt/install libgtk-3-dev
    apt/install liblightdm-gobject-1-dev
    apt/install liblightdm-gobject-1-dev
    apt/install libx11-dev
    apt/install valac
    # source:
    # dunst dependencies:
    # apt/install libdbus-1-dev
    # apt/install libnotify-dev
    # apt/install libx11-dev
    # apt/install libxinerama-dev
    # apt/install libxrandr-dev
    # apt/install libxss-dev
    # apt/install libglib2.0-dev
    # apt/install libpango1.0-dev
    # apt/install libgtk-3-dev
    # apt/install libxdg-basedir-dev
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install network-manager-openconnect
    apt/install network-manager-openconnect-gnome
    apt/install openvpn
    apt/install network-manager-openvpn-gnome
    # source: archive.ubuntu.com_ubuntu_dists_bionic-updates_universe_binary-amd64_Packages
    apt/install neofetch
    # source: archive.ubuntu.com_ubuntu_dists_bionic-updates_universe_binary-amd64_Packages
    apt/install nodejs
    apt/install npm
    # source: archive.ubuntu.com_ubuntu_dists_bionic-updates_universe_binary-amd64_Packages
    # apt/install openbox
    # source: ppa.launchpad.net_papirus_papirus_ubuntu_dists_bionic_main_binary-amd64_Packages
    apt/install papirus-icon-theme
    apt/install paper-icon-theme
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install rofi
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install rbenv
    apt/install rxvt-unicode
    # source :spotify
    apt/install spotify-client
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    # apt/install tint2
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install tmux
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install vim
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install wmctrl
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install xclip
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install xdotool
    # source: archive.ubuntu.com_ubuntu_dists_bionic_universe_binary-amd64_Packages
    apt/install zsh
    # source
    apt/install imagemagick
}

install/software() {
    e_header "Installing additional software..."

    if [ ! -f "${HOME}/.emacs.d/spacemacs.mk" ]; then
        git clone https://github.com/syl20bnr/spacemacs -b develop ~/.emacs.d
        e_success "spacemacs"
    else
        e_success "spacemacs already installed"
    fi

    if ! [ -x "$(command -v vtop)" ]; then
        sudo npm install -g vtop
        e_success "vtop installed"
    else
        e_success "vtop already installed"
    fi

    if ! [ -x "$(command -v dockly)" ]; then
        sudo npm install -g dockly
        e_success "dockly installed"
    else
        e_success "dockly already installed"
    fi

    if ! [ -x "$(command -v tern)" ]; then
        sudo npm install -g tern
        e_success "tern installed"
    else
        e_success "tern already installed"
    fi

    if [ ! -d /usr/share/fonts/truetype/fira ]; then
        rm -rf Fira-master.zip
        curl https://github.com/mozilla/Fira/archive/master.zip -J -L -O
        unzip Fira-master.zip > /dev/null 2>&1
        sudo mkdir -p /usr/share/fonts/truetype/fira
        sudo cp Fira-master/ttf/* /usr/share/fonts/truetype/fira
        rm -rf Fira-master master.zip Fira-master.zip
        e_success "Fira Mona installed"
    else
        e_success "Fira Mona already installed"
    fi

    if [ ! -d "${HOME}/.tmux/plugins/tpm" ]; then
        git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
        e_success "tmux tpm installed"
    else
        e_success "tmux tpm already installed"
    fi

    if [ ! -d "${HOME}/.fzf" ]; then
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
        ~/.fzf/install --all --no-fish --64
        e_success "fzf installed"
    else
        e_success "fzf already installed"
    fi

    if [ ! -d "${HOME}/.vim/bundle/Vundle.vim" ]; then
        git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
        e_success "vim vundle installed"
    else
        e_success "vim vundle already installed"
    fi

    if [ ! -d "${HOME}/.rbenv" ]; then
        git clone https://github.com/rbenv/rbenv.git ~/.rbenv
        pushd ~/.rbenv
        src/configure && make -C src
        popd
        eval "$(rbenv init -)"
        e_success "rbenv installed"
    else
        e_success "rbenv already installed"
    fi

    if ! [ -d "/${HOME}/.rbenv/plugins/ruby-build" ]; then
        mkdir -p "${HOME}/.rbenv/plugins"
        git clone https://github.com/rbenv/ruby-build.git "${HOME}"/.rbenv/plugins/ruby-build
        e_success "ruby-build installed"
    else
        e_success "ruby-build already installed"
    fi

    if ! [ -d "${HOME}/.rbenv/versions/2.5.0" ]; then
        rbenv install 2.5.0
        rbenv global 2.5.0
        e_success "ruby 2.5 installed"
    else
        e_success "ruby already installed"
    fi

    if ! [ -x "$(command -v tmuxinator)" ]; then
        gem install tmuxinator
        e_success "tmuxinator installed"
    else
        e_success "tmuxinator already installed"
    fi

    if ! [ -x "$(command -v go)" ]; then
        e_error "Please install go before continuing"
    else
        if ! [ -x "$(command -v finto)" ]; then
            go get github.com/threadwaste/finto/cmd/finto
            sudo cp "${DOTFILES_DIRECTORY}/systemd/finto.service" /etc/systemd/system/finto.service
            if [ -x "$(sudo systemctl is-system-running)" ]; then
                sudo systemctl daemon-reload
                sudo systemctl enable finto
                sudo systemctl start finto
            else
                e_error "unable to configure systemd"
            fi
            e_success "finto installed"
        else
            e_success "finto already installed"
        fi

        if ! [ -x "$(command -v gocode)" ]; then
            go get -u github.com/nsf/gocode
            e_success "gocode installed"
        else
            e_success "gocode already installed"
        fi

        if ! [ -x "$(command -v godef)" ]; then
            go get -u -v github.com/rogpeppe/godef
            e_success "godef installed"
        else
            e_success "gocode already installed"
        fi

        if ! [ -x "$(command -v guru)" ]; then
            go get -u -v golang.org/x/tools/cmd/guru
            e_success "guru installed"
        else
            e_success "guru already installed"
        fi

        if ! [ -x "$(command -v gorename)" ]; then
            go get -u -v golang.org/x/tools/cmd/gorename
            e_success "gorename installed"
        else
            e_success "gorename already installed"
        fi

        if ! [ -x "$(command -v goimports)" ]; then
            go get -u -v golang.org/x/tools/cmd/goimports
            e_success "goimports installed"
        else
            e_success "goimports already installed"
        fi

        if ! [ -x "$(command -v go-langserver)" ]; then
            go get -u github.com/sourcegraph/go-langserver
            e_success "go-langserver installed"
        else
            e_success "go-langserver already installed"
        fi
    fi

    if ! [ -x "$(command -v pip)" ]; then
        e_error "Please install Python/pip before continuing"
    else
        if ! [ -x "$(command -v desktopevents-data)" ]; then
            sudo pip install "${DOTFILES_DIRECTORY}/scripts/desktopevents"
            e_success "desktopevents installed"
        else
            e_success "desktopevents already installed"
        fi
    fi
}

credentials/exist() {
    secret-tool lookup system "$1" service "$2" type "$3" > /dev/null
}

# Stores credentials for the given system componenet
credentials/store() {
    local system=$1
    local service=$2
    local type=$3
    if credentials/exist "$system" "$service" "$type" ; then
        e_success "$system:$service:$type already exists"
    else
        echo "* Enter $system:$service:$type" >&3
        secret-tool store --label="$system:$service:$type" system "$system" service "$service" type "$type"
        e_success "stored $system:$service:$type"
    fi
}

install/credentials() {
    e_header "Setting up required keyring credentials"

    credentials/store "dss" "ldap" "email"
    credentials/store "dss" "ldap" "password"
}

todo() {
    e_header "Remaining items to configure and install"
}

run_help() {

    cat <<EOT
Linux Mint dotfiles - Jordan Faust

Usage: $(basename "$0") [options]

Options:
    -h, --help Print this help text
    -a, --all Install all dotfiles, dependencies, software, and credentials
    -d, --dependencies Install system dependencies via apt
    -s, --software Install additional software
    -c, --credentials Store required credentials in the keyring
EOT

}

# Test for known flags
dependencies=false dotfiles=false software=false credentials=false all=false help=false nothing=true
for opt in $@
do
    case $opt in
        --dotfiles) dotfiles=true nothing=false ;;
        --dependencies) dependencies=true nothing=false ;;
        --software) software=true nothing=false ;;
        --credentials) credentials=true nothing=false ;;
        --all) all=true nothing=false ;;
        --help) help=true nothing=false ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

if type_exists 'pacman'; then
    e_header "Configuring pacman"

    e_header "* Installing essential packages"
    pacman/install sed
    pacman/install grep
    pacman/install tar

    e_header "* Setting makepkg j2"
    sudo sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf
    e_success "Set j2 to $(nproc)"

    e_header "* Setting color"
    sudo grep "^Color" /etc/pacman.conf >/dev/null || sudo sed -i "s/^#Color/Color/" /etc/pacman.conf
    e_success "Color enabled"

    e_header "* Setting ILoveCandy"
    sudo grep "ILoveCandy" /etc/pacman.conf >/dev/null || sudo sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
    e_success "ILoveCandy enabled"
fi

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "$(tput setaf 3)Downloading dotfiles...\033[m\n" >&3
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

# Check for git
if ! type_exists 'git'; then
    e_header "Installing Git..." >&3
    if type_exists 'apt'; then
        sudo apt -y -qq install git
    fi
    if type_exists 'pacman'; then
        sudo pacman -S --noconfirm git
    fi

    e_success "git installed"
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing https://github.com/PapirusDevelopmentTeam/papirus-icon-themegit repository..."
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
fi

if ! type_exists 'zsh'; then
    e_header "Setting up ZSH environment"

    if type_exists 'apt'; then
        sudo apt -y -qq install zsh
        e_success "zsh installed"

        sudo apt -y -qq install which
        e_success "which installed"
    fi

    if type_exists 'pacman'; then
        sudo pacman -S --noconfirm zsh
        e_success "zsh installed"

        sudo pacman -S --noconfirm which
        e_success "which installed"
    fi

    e_header "Installing and Configuring Oh My Zsh"

    if [ ! -d "${HOME}/.oh-my-zsh" ]; then
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" "" --unattended >&3
        git clone https://github.com/zsh-users/zsh-autosuggestions "$HOME/.zsh/zsh-autosuggestions/"
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting"
        git clone https://github.com/zsh-users/zsh-history-substring-search "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-history-substring-search"
        e_success "oh-my-zsh installed"
    else
        e_success "oh-my-zsh already installed"
    fi

    dotfiles/link "${DOTFILES_DIRECTORY}/zshrc" "${HOME}/.zshrc"
    dotfiles/link "${DOTFILES_DIRECTORY}/zshenv" "${HOME}/.zshenv"

    e_error "Restart process with ZSH as shell"
    chsh -s $(which zsh)
    exit 1
fi

if [[ "$all" = true ]]; then
    # Install Dependencies
    install/dependencies
    # Create symlinks for configuration
    install/dotfiles
    # Install additional software
    install/software
    # source ${HOME}/.bash_profile

    exit 0
fi

if [[ "$dotfiles" = true ]]; then
    # Install Dependencies
    install/dotfiles
fi

if [[ "$dependencies" = true ]]; then
    # Install Dependencies
    install/dependencies
fi

if [[ "$software" = true ]]; then
    # Install Dependencies
    install/software
fi

if [[ "$credentials" = true ]]; then
    # Install Dependencies
    install/credentials
fi

# Help text
if [[ "$help" = true || "$nothing" = true ]]; then
    run_help >&3
    exit
fi

# handle non-option arguments
if [[ $# -eq 0 ]]; then
    echo "$0: must specify what to install" >&3
    run_help
    exit 4
fi
