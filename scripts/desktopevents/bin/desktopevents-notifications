#!/usr/bin/env python

import os
import sys
import getopt
import json
import datetime
from dateutil import tz
import time
import re
import urllib.parse

import gi
gi.require_version('Notify', '0.7')
from gi.repository import Notify

URL_REGEX = r"""(?i)\b((?:https?:(?:/{1,3}|[a-z0-9%])|[a-z0-9.\-]+[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)/)(?:[^\s()<>{}\[\]]+|\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\))+(?:\([^\s()]*?\([^\s()]+\)[^\s()]*?\)|\([^\s]+?\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’])|(?:(?<!@)[a-z0-9]+(?:[.\-][a-z0-9]+)*[.](?:com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|Ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)\b/?(?!@)))"""

def main(argv):
    tmpfile = ''
    try:
      opts, args = getopt.getopt(argv,"f",["file="])
    except getopt.GetoptError:
      print('desktopevents-notifications -f {{file}}')
      sys.exit(2)
    for opt, arg in opts:
      if opt == '-h':
          print('desktopevents-notifications -f {{file}}')
          sys.exit()
      elif opt in ("-f", "--file"):
          tmpfile = arg

    if tmpfile == "":
        print("must specify the file to load events from")
        sys.exit(1)


    while True:
        events = {}
        with open(tmpfile, 'r') as reader:
            events = json.load(reader)

        Notify.init("Outlook")
        for meeting in events["meetings"]:
            start = datetime.datetime.strptime(meeting['start']['dateTime'], '%Y-%m-%dT%H:%M:%S.%f0')
            now = datetime.datetime.now()

            start_minutes = int(start.hour) * 60 + int(start.minute)
            now_minutes = int(now.hour) * 60 + int(now.minute)

            subject = meeting['subject']
            location = meeting['location']['displayName']

            url = re.findall(URL_REGEX, location)
            if len(url) > 0:
                parsed_url = urllib.parse.urlparse(url[0], 'https')
                location = parsed_url.geturl()

            summary = f'<b>{subject}</b>'
            body = f'<span color="#81a1c1"><i><b>{location}</b></i></span>'

            if start_minutes - now_minutes == 15:
                notification = Notify.Notification.new(
                    summary,
                    body
                )
                notification.set_urgency(Notify.Urgency.NORMAL)
                notification.show()

            if start_minutes - now_minutes == 0:
                notification = Notify.Notification.new(
                    summary,
                    body
                )
                notification.set_urgency(Notify.Urgency.CRITICAL)
                notification.show()

        for email in events["unread_emails"]:
            timezone = tz.gettz('America/Chicago')
            now = datetime.datetime.utcnow()
            format =  '%Y-%m-%dT%H:%M:%SZ'
            received = datetime.datetime.strptime(email["receivedDateTime"], format)

            now_minutes = int(now.hour) * 60 + int(now.minute)
            received_minutes = int(received.hour) * 60 + int(received.minute)

            print(f'now minutes: {now_minutes}')
            print(f'received minutes: {received_minutes}')
            if 0 <= now_minutes - received_minutes <= 1:
                summary = f'<b>New Email</b>'
                body = email["subject"]
                notification = Notify.Notification.new(
                    summary,
                    body
                )
                notification.set_urgency(Notify.Urgency.NORMAL)
                notification.show()

        time.sleep(60)

if __name__ == "__main__":
    main(sys.argv[1:])
